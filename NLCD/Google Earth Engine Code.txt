// Least Cloudy Composite classification
function cloudScore(img) {
   var cloud = ee.Algorithms.Landsat.simpleCloudScore(img).select('cloud');
   // Invert the cloud score; smaller numbers mean less cloudy.
   return img.addBands(ee.Image(1).subtract(cloud).rename('cloud'));
}

var composite = ee.ImageCollection("LANDSAT/LC8_L1T_TOA")
     .filterDate('2015-03-01', '2015-09-01')
     .map(cloudScore)
     .qualityMosaic('cloud')
     .select('B[0-9]*')

// Build the classifier using MODIS land cover for training.
var landcover = ee.Image("MODIS/051/MCD12Q1/2013_01_01").select(0).rename('landcover')
var training = composite.addBands(landcover).sample(geometry, 30)
var classifier = ee.Classifier.cart()
    .train(training, 'landcover')

var classified = composite.classify(classifier)

var palette = [
  'aec3d4', // water
  '152106', '225129', '369b47', '30eb5b', '387242', // forest
  '6a2325', 'c3aa69', 'b76031', 'd9903d', '91af40',  // shrub, grass
  '111149', // wetlands
  'cdb33b', // croplands
  'cc0013', // urban
  '33280d', // crop mosaic
  'd7cdcc', // snow and ice
  'white', // barren
  '6f6f6f'  // tundra
];

Map.addLayer(composite, {max:0.3, bands:["B4", "B3", "B2"]}, 'RGB');
Map.addLayer(landcover, {min:0, max:17, palette: palette}, 'Landcover');
Map.addLayer(classified, {min:0, max:17, palette: palette}, 'Classified', false);
Map.addLayer(landcover.subtract(classified), {min:-1, max:1}, 'Landcover / Classified diff', false);
Map.centerObject(geometry)
var point = ee.Geometry.Point([-80.85, 25.85]);
var fc = ee.FeatureCollection('ft:14EHVevsNgiHZKsJLXw_L3SckzJtU3bJEz5H1nFUf');
print(fc);
//var values = landcover.reduceRegions(fc, 'first', 30);
print(point);
Export.table.toDrive({
  collection: landcover.reduceRegions(fc, 'first', 30),
  description:'vectorsToDriveExample',
  fileFormat: 'KML'
});